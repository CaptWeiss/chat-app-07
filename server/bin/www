#!/usr/bin/env node

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
const { User } = require("../db/models");
const onlineUsers = require("../onlineUsers");
const cookie = require('cookie');
const jwt = require("jsonwebtoken");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);

io.use((socket, next) => {
  const token = cookie.parse(socket.handshake.headers.cookie||'')['x-access-token'];
  if (token) {
    try {
      const decoded = jwt.verify(token, process.env.SESSION_SECRET) ;
      User.findOne({ where: { id: decoded.id }})
        .then(user => {
          socket.user = user.toJSON();
          const onlineUser = onlineUsers[decoded.id] ;
          if(onlineUser) {
            onlineUsers[decoded.id].socketId = socket.id ;
          }else {
            onlineUsers[decoded.id] = {
              online: false,
              socketId: socket.id
            }
          }
          next();
        });
    } catch (error) {
      next(error);
    }
  } else {
    next(new Error("unauthorized"));
  }
});

io.on("connection", (socket) => {
  socket.on("go-online", (id) => {
    if (socket.user.id===id) {
      onlineUsers[id] = {
        online: true,
        socketId: socket.id
      } ;
      // send the user who just went online to everyone else who is already online
      socket.broadcast.emit("add-online-user", id);
    }
  });

  socket.on("new-message", (data) => {
    const {recipientId,...rest} = data ;
    if(onlineUsers[recipientId]) {
      io.to(onlineUsers[recipientId].socketId)
        .emit("new-message", rest);
    }
  });

  socket.on("read-reciept", (data) => {
    const {updatedMessagesId,conversationId} = data ;
    socket.broadcast.emit("read-reciept", {updatedMessagesId,conversationId});
  });

  socket.on("typing", (data) => {
    const {recipientId,...rest} = data ;
    if(onlineUsers[recipientId]) {
      io.to(onlineUsers[recipientId].socketId)
        .emit("typing", rest);
    }
  });

  socket.on("logout", (id) => {
    if (onlineUsers[id]) {
      delete onlineUsers[id];
      socket.broadcast.emit("remove-offline-user", id);
    }
  });

  socket.on("disconnect", (id) => {
    if("user" in socket) {
      const id = socket.user.id ;
      if (onlineUsers[id]) {
        delete onlineUsers[id];
        socket.broadcast.emit("remove-offline-user", id);
      }
    }
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
